diff --git a/otsd b/otsd
index b8d00cc..367b88c 100755
--- a/otsd
+++ b/otsd
@@ -44,6 +44,10 @@ parser.add_argument("--debug-file-max-size", type=int,
                     dest='debug_file_max_size',
                     default=10000000,
                     help="Max size of the debug log (default: %(default)d bytes) ")
+parser.add_argument("--debug-file-backup-count", type=int,
+                    dest='debug_file_backup_count',
+                    default=10,
+                    help="Number of debug log file backups (default: %(default)d bytes) ")
 
 parser.add_argument("--rpc-port", type=int,
                     default=14788,
@@ -66,6 +70,8 @@ parser.add_argument("--btc-min-confirmations", metavar='N', type=int,
 parser.add_argument("--btc-min-tx-interval", metavar='SECONDS', type=int,
                     default=3600,
                     help="Minimum interval between timestamp transactions (default: %(default)d seconds)")
+parser.add_argument('--working-hours', nargs='+', type=int, choices=range(0,24), metavar='HOUR',
+                    help='Restrict timestamp transactions only at defined hours as UTC integer values (0..23)')
 parser.add_argument("--btc-max-fee", metavar='FEE', type=float,
                     default=0.0001,
                     help="Maximum transaction fee (default: %(default).3f BTC)")
@@ -86,7 +92,7 @@ if not os.path.exists(directory):
     os.makedirs(directory)
 
 debugfile = os.path.expanduser(args.debug_file)
-handler = logging.handlers.RotatingFileHandler(filename=debugfile, maxBytes=args.debug_file_max_size)
+handler = logging.handlers.RotatingFileHandler(filename=debugfile, maxBytes=args.debug_file_max_size, backupCount=args.debug_file_backup_count)
 fmt = logging.Formatter("%(asctime)-15s %(message)s")
 handler.setFormatter(fmt)
 logger = logging.getLogger('')
@@ -123,7 +129,8 @@ stamper = otsserver.stamper.Stamper(calendar, exit_event,
                                     args.btc_min_confirmations,
                                     args.btc_min_tx_interval,
                                     args.btc_max_fee * bitcoin.core.COIN,
-                                    args.max_pending)
+                                    args.max_pending,
+                                    args.working_hours)
 
 calendar.stamper = stamper
 
diff --git a/otsserver/rpc.py b/otsserver/rpc.py
index 94e5ed8..c931b5e 100644
--- a/otsserver/rpc.py
+++ b/otsserver/rpc.py
@@ -17,6 +17,7 @@ import threading
 import time
 import pystache
 import datetime 
+import simplejson
 from functools import reduce
 
 import bitcoin.core
@@ -247,8 +248,11 @@ Latest mined transactions: </br>
               'time_between_transactions': time_between_transactions,
               'fees_in_last_week': fees_in_last_week,
             }
-            welcome_page = renderer.render(homepage_template, stats)
-            self.wfile.write(str.encode(welcome_page))
+            if self.headers['Accept'] == "application/json":
+                self.wfile.write(str.encode(simplejson.dumps(stats, use_decimal=True, indent=4 * ' ')))
+            else:
+                welcome_page = renderer.render(homepage_template, stats)
+                self.wfile.write(str.encode(welcome_page))
 
 
         elif self.path.startswith('/timestamp/'):
diff --git a/otsserver/stamper.py b/otsserver/stamper.py
index 4007e1f..10f757d 100644
--- a/otsserver/stamper.py
+++ b/otsserver/stamper.py
@@ -25,6 +25,7 @@ from opentimestamps.core.op import OpPrepend, OpSHA256
 from opentimestamps.core.timestamp import Timestamp, make_merkle_tree
 
 from otsserver.calendar import Journal
+from datetime import datetime
 
 KnownBlock = collections.namedtuple('KnownBlock', ['height', 'hash'])
 TimestampTx = collections.namedtuple('TimestampTx', ['tx', 'tip_timestamp', 'commitment_timestamps'])
@@ -370,6 +371,10 @@ class Stamper:
 
                 break
 
+        if self.working_hours and datetime.utcnow().hour not in self.working_hours:
+            logging.debug("No working hour")
+            return
+
         time_to_next_tx = int(self.last_timestamp_tx + self.min_tx_interval * random.uniform(1, 2) - time.time())
         if time_to_next_tx > 0:
             # Minimum interval between transactions hasn't been reached, so do nothing
@@ -517,7 +522,7 @@ class Stamper:
             else:
                 return False
 
-    def __init__(self, calendar, exit_event, relay_feerate, min_confirmations, min_tx_interval, max_fee, max_pending):
+    def __init__(self, calendar, exit_event, relay_feerate, min_confirmations, min_tx_interval, max_fee, max_pending, working_hours):
         self.calendar = calendar
         self.exit_event = exit_event
 
@@ -527,6 +532,7 @@ class Stamper:
         self.min_tx_interval = min_tx_interval
         self.max_fee = max_fee
         self.max_pending = max_pending
+        self.working_hours = working_hours
 
         self.known_blocks = KnownBlocks()
         self.unconfirmed_txs = []
diff --git a/requirements.txt b/requirements.txt
index 6ff870b..79603a3 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -4,3 +4,4 @@ leveldb>=0.20
 pysha3>=1.0.2
 pystache>=0.5
 requests
+simplejson
